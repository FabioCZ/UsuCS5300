%{ /* -*- C++ -*- */
/*
 * Fabio Gottlicher's CPSL Compiler
 * A01647928
 * Created for USU CS5300 - Compiler Construction, Spring 2016
 */

# include <cerrno>
# include <climits>
# include <cstdlib>
# include <string>
# include "driver.hpp"
# include "parser.hpp"
#include <cstring>
#include <boost/algorithm/string.hpp>
#include <boost/algorithm/string/replace.hpp>
#include <vector>

// Work around an incompatibility in flex (at least versions
// 2.5.31 through 2.5.33): it generates code that does
// not conform to C89.  See Debian bug 333231
// <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.
# undef yywrap
# define yywrap() 1

// The location of the current token.
static yy::location loc;

std::string replaceReserved(std::string s)
{
    boost::replace_all(s,"\\n","\n");
    boost::replace_all(s,"\\r","\r");
    boost::replace_all(s,"\\b","\b");
    boost::replace_all(s,"\\t","\t");
    boost::replace_all(s,"\\f","\f");
    boost::replace_all(s,"\\","");
    return s;
}

std::string cleanUpString(std::string s)
{
    boost::erase_all(s, "\"");
    //s = replaceReserved(s);
    return s;
}

char cleanUpChar(std::string s)
{
    boost::erase_all(s, "'");
    s = replaceReserved(s);
    return s.c_str()[0];
}

%}

%option noyywrap nounput batch debug noinput


letter [a-zA-Z]
digit [0-9]
blank [ \t]

%{
  // Code run each time a pattern is matched.
  # define YY_USER_ACTION  loc.columns (yyleng);
%}
 /****************************/
%%
 /****************************/

%{
  // Code run each time yylex is called.
  loc.step ();
%}

{blank}+   { loc.step ();}
[\n]+      {loc.lines (yyleng); loc.step ();}

     /* keywords */
array|ARRAY { return yy::Parser::make_ArrayTok(loc); }
begin|BEGIN { return  yy::Parser::make_BeginTok(loc); }
chr|CHR { return yy::Parser::make_ChrTok(loc); }
const|CONST { return yy::Parser::make_ConstTok(loc); }
do|DO { return yy::Parser::make_DoTok(loc); }
downto|DOWNTO { return yy::Parser::make_DowntoTok(loc); }
else|ELSE { return yy::Parser::make_ElseTok(loc); }
elseif|ELSEIF { return yy::Parser::make_ElseifTok(loc); }
end|END { return yy::Parser::make_EndTok(loc); }
for|FOR { return yy::Parser::make_ForTok(loc); }
forward|FORWARD { return yy::Parser::make_ForwardTok(loc); }
function|FUNCTION { return yy::Parser::make_FunctionTok(loc); }
if|IF { return yy::Parser::make_IfTok(loc); }
of|OF { return yy::Parser::make_OfTok(loc); }
ord|ORD { return yy::Parser::make_OrdTok(loc); }
pred|PRED { return yy::Parser::make_PredTok(loc); }
procedure|PROCEDURE { return yy::Parser::make_ProcedureTok(loc); }
read|READ { return yy::Parser::make_ReadTok(loc); }
record|RECORD { return yy::Parser::make_RecordTok(loc); }
ref|REF { return yy::Parser::make_RefTok(loc); }
repeat|REPEAT { return yy::Parser::make_RepeatTok(loc); }
return|RETURN { return yy::Parser::make_ReturnTok(loc); }
stop|STOP { return yy::Parser::make_StopTok(loc); }
succ|SUCC { return yy::Parser::make_SuccTok(loc); }
then|THEN { return yy::Parser::make_ThenTok(loc); }
to|TO { return yy::Parser::make_ToTok(loc); }
type|TYPE { return yy::Parser::make_TypeTok(loc); }
until|UNTIL { return yy::Parser::make_UntilTok(loc); }
var|VAR { return yy::Parser::make_VarTok(loc); }
while|WHILE { return yy::Parser::make_WhileTok(loc); }
write|WRITE { return yy::Parser::make_WriteTok(loc); }

    /* operators */
\+ { return yy::Parser::make_PlusTok(loc);}
\- { return yy::Parser::make_MinusTok(loc);}
\* { return yy::Parser::make_MultiplyTok(loc);}
\/ { return yy::Parser::make_DivideTok(loc);}
\& { return yy::Parser::make_AndTok(loc);}
\| { return yy::Parser::make_OrTok(loc);}
\~ { return yy::Parser::make_NotTok(loc);}
\= { return yy::Parser::make_EqualsTok(loc);} 
\<> { return yy::Parser::make_NotEqualTok(loc);}
\< { return yy::Parser::make_LessThanTok(loc);}
\<= { return yy::Parser::make_LessEqualTok(loc);}
\> { return yy::Parser::make_GreaterTok(loc);}
\>= { return yy::Parser::make_GreaterEqualTok(loc);}
\. { return yy::Parser::make_DotTok(loc);}
\, { return yy::Parser::make_CommaTok(loc);}
\: { return yy::Parser::make_ColonTok(loc);}
\; { return yy::Parser::make_SemicolonTok(loc);}
\( { return yy::Parser::make_OpenParenTok(loc);}
\) { return yy::Parser::make_CloseParenTok(loc);}
\[ { return yy::Parser::make_OpenBrktTok(loc);}
\] { return yy::Parser::make_CloseBrktTok(loc);}
\:= { return yy::Parser::make_ColonEqualTok(loc);}
\% { return yy::Parser::make_PercentTok(loc);}

    /* Identifier */
{letter}({letter}|{digit}|_)* { std::string str(yytext); return yy::Parser::make_IdentifierTok(str,loc);}
    /* literals */

0x([0-9a-fA-F])+ { int val = (int)strtol(yytext,NULL,0); return yy::Parser::make_IntTok(val,loc);}  //Here the language specification is vague whether a-f should be caps or no caps, so I match both
0({digit})+ { int val = (int)strtol(yytext,NULL,8); return yy::Parser::make_IntTok(val,loc);}
0|([1-9]({digit})*) { int val = (int)strtol(yytext,NULL,10); return yy::Parser::make_IntTok(val,loc);}
\"[a-zA-Z0-9~`!@'#$%^&*()_+=\-\[\]{}\\\/><,.:;| ]*\" { std::string str = cleanUpString(yytext); return yy::Parser::make_StringTok(str,loc);}
'([\x20-\x5b\x5d-\x7e]|(\\[\x21-\x7e]))' { char val = cleanUpChar(yytext); return yy::Parser::make_CharTok(val,loc);}

 
    /* Comments */
(\$.*\n)  {loc.lines (yyleng); loc.step ();}

<<EOF>>    return yy::Parser::make_END(loc);


%%

void Driver::scan_begin ()
{
  yy_flex_debug = trace_scanning;
  if (file.empty () || file == "-")
    yyin = stdin;
  else if (!(yyin = fopen (file.c_str (), "r")))
    {
      error ("cannot open " + file + ": " + strerror(errno));
      exit (EXIT_FAILURE);
    }
}

void
Driver::scan_end ()
{
  fclose (yyin);
}

