/* $Id: parser.yy 48 2009-09-05 08:07:10Z tb $ -*- mode: c++ -*- */
/** \file parser.yy Contains the example Bison parser source */

%{ /*** C/C++ Declarations ***/

#include <stdio.h>
#include <string>
#include <vector>
#define YYDEBUG 1
%}

/*** yacc/bison Declarations ***/

%debug
%error-verbose 
%start Application
/* write out a header file containing the token defines */
%defines

%skeleton "lalr1.cc"

%name-prefix="FC"
%define "parser_class_name" "Parser"

/* keep track of the current position within the input */
%locations
%initial-action
{
    // initialize the initial location object
    @$.begin.filename = @$.end.filename = &driver.streamname;
};

/* The driver is passed by reference to the parser and to the scanner. This
 * provides a simple but effective pure interface, not relying on global
 * variables. */
%parse-param { class Driver& driver }

%{

#include "driver.hpp"
#include "scanner.hpp"
#undef yylex
#define yylex driver.lexer->lex

%}
%token END 0 "end of file"
%token ArrayTok
%token BeginTok
%token EndProgTok
%token ChrTok
%token ConstTok
%token DoTok
%token DowntoTok
%token ElseTok
%token ElseifTok
%token EndTok
%token ForTok
%token ForwardTok
%token FunctionTok
%token IfTok
%token OfTok
%token OrdTok
%token PredTok
%token ProcedureTok
%token ReadTok
%token RecordTok
%token RefTok
%token RepeatTok
%token ReturnTok
%token StopTok
%token SuccTok
%token ThenTok
%token ToTok
%token TypeTok
%token UntilTok
%token VarTok
%token WhileTok
%token WriteTok


%left PlusTok
%left MinusTok
%right UnaryMinusTok
%left MultiplyTok
%left DivideTok
%left AndTok
%left OrTok
%right NotTok
%nonassoc EqualsTok
%nonassoc NotEqualTok
%nonassoc LessThanTok
%nonassoc LessEqualTok
%nonassoc GreaterTok
%nonassoc GreaterEqualTok
%token DotTok
%token CommaTok
%token ColonTok
%token SemicolonTok
%token OpenParenTok
%token CloseParenTok
%token OpenBrktTok
%token CloseBrktTok
%token ColonEqualTok
%left PercentTok

%token IdentifierTok

%token IntTok
%token StringTok
%token CharTok

%%
/** PARSE TREE **/

/* Program Structure */
Application : ConstDeclOptional TypeDeclOptional VarDeclOptional ProcedureFunctionOptional Block DotTok END{};

ProcedureFunctionOptional : ProcedureDecl {}
	| FunctionDecl {}
	| ProcedureFunctionOptional ProcedureFunctionOptional {}
	| /* empty */; 

/* Const Decl */
ConstDeclOptional : ConstDecl {}
	| /* empty */;

ConstDecl : ConstTok ConstDecls {};

ConstDecls : ConstDeclOne {}
	| ConstDecls ConstDeclOne {};

ConstDeclOne :  IdentifierTok EqualsTok Expression SemicolonTok {};

/* Procedures and Functions */
ProcedureDecl : ProcedureTok IdentifierTok OpenParenTok FormalParametersOptional CloseParenTok SemicolonTok ForwardTok SemicolonTok {}
	| ProcedureTok IdentifierTok OpenParenTok FormalParametersOptional CloseParenTok SemicolonTok Body SemicolonTok {};

FunctionDecl : FunctionTok IdentifierTok OpenParenTok FormalParametersOptional CloseParenTok ColonTok Type SemicolonTok ForwardTok SemicolonTok {}
	| FunctionTok IdentifierTok OpenParenTok FormalParametersOptional CloseParenTok ColonTok Type SemicolonTok Body SemicolonTok {};

FormalParametersOptional : FormalParameter {}
	| FormalParameter SemicolonTok FormalParameter {}
	| /* empty */;

FormalParameter : VarRefOptional IdentList ColonTok Type {};

VarRefOptional : VarTok {}
	| RefTok {}
	| /* empty */;

Body : ConstDeclOptional TypeDeclOptional VarDeclOptional Block {};

Block : BeginTok StatementSequence EndTok {};

/* Type Decl */
TypeDeclOptional : TypeDecls {}
	| /* empty */;

TypeDecls : TypeTok TypeDecl {};

TypeDecl : IdentifierTok EqualsTok Type SemicolonTok {}
	| TypeDecl TypeDecl {};

Type : SimpleType {}
	| RecordType {}
	| ArrayType {};

SimpleType : IdentifierTok {};

RecordType : RecordTok Records EndTok {};

Records : IdentList ColonTok Type SemicolonTok {}
	| Records Records {};

ArrayType : ArrayTok OpenBrktTok Expression ColonTok Expression CloseBrktTok OfTok Type {};

IdentList : IdentList CommaTok IdentifierTok {}
	| IdentifierTok{};

/* Var Decl */
VarDeclOptional : VarDecl {}
	| /* empty */;

VarDecl : VarTok VarDecls {};

VarDecls : VarDecls VarDeclOne {}
	| VarDeclOne {};

VarDeclOne : IdentList ColonTok Type SemicolonTok {};

/* Statements */
StatementSequence : StatementSequence SemicolonTok Statement {}
	| Statement {};


Statement : Assignment {}
	| IfStatement {}
	| WhileStatement {}
	| RepeatStatement {}
	| ForStatement {}
	| StopStatement {}
	| ReturnStatement {}
	| ReadStatement {}
	| WriteStatement {}
	| ProcedureCall {}
	| NullStatement {};

Assignment : LVal ColonEqualTok Expression {};

IfStatement : IfTok Expression ThenTok StatementSequence ElseIfStatements ElseOptional EndTok {};

ElseIfStatements : ElseIfStatements ElseIfStatements {}
	| ElseifTok Expression ThenTok StatementSequence {}
	| /* empty */;

ElseOptional : ElseTok StatementSequence {}
	| /* empty */;

WhileStatement : WhileTok Expression DoTok StatementSequence EndTok {};

RepeatStatement : RepeatTok StatementSequence UntilTok Expression {};

ForStatement : ForTok IdentifierTok ColonEqualTok Expression ToDown Expression DoTok StatementSequence EndTok {};

ToDown : ToTok {}
	| DowntoTok {};

StopStatement : StopTok {};

ReturnStatement : ReturnTok {}
	| ReturnTok Expression {};

ReadStatement : ReadTok OpenParenTok LValOptional CloseParenTok {};

LValOptional : LValOptional CommaTok LVal {}
	| LVal {};

WriteStatement : WriteTok OpenParenTok WriteExpressions CloseParenTok {};

WriteExpressions : Expression {}
	| WriteExpressions CommaTok Expression {}; 

ProcedureCall : IdentifierTok OpenParenTok ExpressionsOptional CloseParenTok {};

ExpressionsOptional : ExpressionOptional {}
	| /* empty */;

ExpressionOptional : ExpressionOptional CommaTok Expression {}
	| Expression  {}
	| /* empty */;

NullStatement : {};

/* Expressions */
Expression : Expression AndTok Expression {}
	| Expression EqualsTok Expression {}
	| Expression NotEqualTok Expression {}
	| Expression LessEqualTok Expression {}
	| Expression GreaterEqualTok Expression {}
	| Expression LessThanTok Expression {}
	| Expression GreaterTok Expression {}
	| Expression PlusTok Expression {}
	| Expression MinusTok Expression {}
	| Expression MultiplyTok Expression {}
	| Expression DivideTok Expression {}
	| Expression MultiplyTok Expression {}
	| NotTok Expression {}
	| MinusTok Expression %prec UnaryMinusTok {}
	| OpenParenTok Expression CloseParenTok {}
	| IdentifierTok OpenParenTok ExpressionsOptional CloseParenTok
	| ChrTok OpenParenTok Expression CloseParenTok {}
	| OrdTok OpenParenTok Expression CloseParenTok {}
	| PredTok OpenParenTok Expression CloseParenTok {}
	| SuccTok OpenParenTok Expression CloseParenTok {}
	| LVal {}
	| IntTok {}
	| StringTok {}
	| CharTok {};

LVal : IdentifierTok {}
	| LVal DotTok IdentifierTok {}
	| LVal OpenBrktTok Expression CloseBrktTok {};


%% /*** Additional Code ***/

void FC::Parser::error(const Parser::location_type& l,
			    const std::string& m)
{
    driver.error(l, m);
}
