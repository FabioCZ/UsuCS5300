/* $Id: scanner.ll 44 2008-10-23 09:03:19Z tb $ -*- mode: c++ -*- */
/** \file scanner.ll Define the example Flex lexical scanner */

%{ /*** C/C++ Declarations ***/

#include <string>
#include <boost/algorithm/string.hpp>
#include <boost/algorithm/string/replace.hpp>
#include <vector>
#include "scanner.hpp"

/* import the parser's token type into a local typedef */
typedef FC::Parser::token token;
typedef FC::Parser::token_type token_type;

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::EndTok
/*
void printKeyword(std::string s)
{
    std::cout << "Found keyword : " << s << " at line : " << yylineno << std::endl;
}

void printOperator(std::string s)
{
    std::cout << "Found operator : " << s << " at line : " << yylineno << std::endl;    
}

void printIdentifier(std::string s)
{
    std::cout << "Found identifier: " << s << " at line : " << yylineno << std::endl;
}

void printIntLiteral(std::string type, int value)
{
    std::cout << "Found integer literal in base: " << type.c_str() << " ,value (dec):   " << value << " at line : " << yylineno << std::endl;
}

void printStringLiteral(std::string s)
{
    std::cout << "Found string literal: " << s << " at line: " << yylineno << std::endl;
}

void printCharLiteral(char c)
{
    std::cout << "Found character literal: " << c << " at line: " << yylineno << std::endl;
}
*/
std::string replaceReserved(std::string s)
{
    boost::replace_all(s,"\\n","\n");
    boost::replace_all(s,"\\r","\r");
    boost::replace_all(s,"\\b","\b");
    boost::replace_all(s,"\\t","\t");
    boost::replace_all(s,"\\f","\f");
    boost::replace_all(s,"\\","");
    return s;
}

std::string cleanUpString(std::string s)
{
    boost::erase_all(s, "\"");
    s = replaceReserved(s);
    return s;
}

char cleanUpChar(std::string s)
{
    boost::erase_all(s, "'");
    s = replaceReserved(s);
    return s.c_str()[0];
}
/*
void printComment(std::string s)
{
    boost::erase_all(s,"$");
    boost::erase_all(s,"\n");
    std::cout << "Found comment with content: " << s << " at line: " << yylineno << std::endl;
}
*/
/*
void printError(std::string s)
{
    std::cout << "Found unknow character (error): " << s << " at line: " << yylineno << std::endl;
}
*/
%}

/*** Flex Declarations and Options ***/

%option c++
%option debug
%option noyywrap
%option yylineno
letter [a-zA-Z]
digit [0-9]
%% 

     /* keywords */
array { return token::ArrayTok; }
begin { return  token::BeginTok; }
chr { return token::ChrTok; }
const { return token::ConstTok; }
do { return token::DoTok; }
downto { return token::DowntoTok; }
else { return token::ElseTok; }
elseif { return token::ElseifTok; }
end { return token::EndTok; }
for { return token::ForTok; }
forward { return token::ForwardTok; }
function { return token::FunctionTok; }
if { return token::IfTok; }
of { return token::OfTok; }
ord { return token::OrdTok; }
pred { return token::PredTok; }
procedure { return token::ProcedureTok; }
read { return token::ReadTok; }
record { return token::RecordTok; }
ref { return token::RefTok; }
repeat { return token::RepeatTok; }
return { return token::ReturnTok; }
stop { return token::StopTok; }
succ { return token::SuccTok; }
then { return token::ThenTok; }
to { return token::ToTok; }
type { return token::TypeTok; }
until { return token::UntilTok; }
var { return token::VarTok; }
while { return token::WhileTok; }
write { return token::WriteTok; }

    /* operators */
\+ { return token::PlusTok;}
\- { return token::MinusTok;}
\* { return token::MultiplyTok;}
\/ { return token::DivideTok;}
\& { return token::AndTok;}
\| { return token::OrTok;}
\~ { return token::NotTok;}
\= { return token::EqualsTok;} 
\<> { return token::LessGreaterTok;}
\< { return token::LessThanTok;}
\<= { return token::LessEqualTok;}
\> { return token::GreaterTok;}
\>= { return token::GreaterEqualTok;}
\. { return token::DotTok;}
\, { return token::CommaTok;}
\: { return token::ColonTok;}
\; { return token::SemicolonTok;}
\( { return token::OpenParenTok;}
\) { return token::CloseParenTok;}
\[ { return token::OpenBrktTok;}
\] { return token::CloseBrktTok;}
\:= { return token::ColonEqualTok;}
\% { return token::PercentTok;}

    /* Identifier */
{letter}({letter}|{digit}|_)* {/*TODO set value hereyytext;*/ return token::IdentifierTok;}
    /* literals */
    
0x([0-9a-fA-F])+ {/*TODO set value here*/(int)strtol(yytext,NULL,0); return token::IntTok;}  //Here the language specification is vague whether a-f should be caps or no caps, so I match both
0({digit})+ {/*TODO set value here*/(int)strtol(yytext,NULL,8); return token::IntTok;}
0|([1-9]({digit})*) {/*TODO set value here*/ (int)strtol(yytext,NULL,10); return token::IntTok;}
\"[\x20-\x7e]+\" {/*TODO set value here*/cleanUpString(yytext); return token::StringTok;}
'([\x21-\x5b\x5d-\x7e]|(\\[\x21-\x7e]))' {/*TODO set value here*/cleanUpChar(yytext); return token::ChrTok;}
 
    /* Comments */
(\$.*\n)  {/*Comments, don't do anything printComment(yytext);*/ }
    /* other */
[ \n\t\r]+ {/*whitespace, nothing to do here*/}
. { /*printError(yytext);*/}

%%

/** Scanner implementation **/

namespace FC {

Scanner::Scanner(std::istream* in,
		 std::ostream* out)
    : yyFlexLexer(in, out)
{
}

Scanner::~Scanner()
{
}

void Scanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

}

/* This implementation of ExampleFlexLexer::yylex() is required to fill the
 * vtable of the class ExampleFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */

#ifdef yylex
#undef yylex
#endif

int yyFlexLexer::yylex()
{
    std::cerr << "in ExampleFlexLexer::yylex() !" << std::endl;
    return 0;
}

/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

// int yyFlexLexer::yywrap()
// {
//     return 1;
// }

